// Code generated by MockGen. DO NOT EDIT.
// Source: presenter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	postgres "github.com/nvasilev98/calculator/pkg/database/postgres"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Calculate mocks base method
func (m *MockController) Calculate(expr string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", expr)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate
func (mr *MockControllerMockRecorder) Calculate(expr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockController)(nil).Calculate), expr)
}

// Insert mocks base method
func (m *MockController) Insert(model postgres.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockControllerMockRecorder) Insert(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockController)(nil).Insert), model)
}

// SelectResult mocks base method
func (m *MockController) SelectResult(id int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectResult", id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectResult indicates an expected call of SelectResult
func (mr *MockControllerMockRecorder) SelectResult(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectResult", reflect.TypeOf((*MockController)(nil).SelectResult), id)
}
