// Code generated by MockGen. DO NOT EDIT.
// Source: dataaccess.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	postgres "github.com/nvasilev98/calculator/pkg/database/postgres"
	reflect "reflect"
)

// MockCalculationDAO is a mock of CalculationDAO interface
type MockCalculationDAO struct {
	ctrl     *gomock.Controller
	recorder *MockCalculationDAOMockRecorder
}

// MockCalculationDAOMockRecorder is the mock recorder for MockCalculationDAO
type MockCalculationDAOMockRecorder struct {
	mock *MockCalculationDAO
}

// NewMockCalculationDAO creates a new mock instance
func NewMockCalculationDAO(ctrl *gomock.Controller) *MockCalculationDAO {
	mock := &MockCalculationDAO{ctrl: ctrl}
	mock.recorder = &MockCalculationDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculationDAO) EXPECT() *MockCalculationDAOMockRecorder {
	return m.recorder
}

// InsertCalculation mocks base method
func (m *MockCalculationDAO) InsertCalculation(db *sql.DB, model postgres.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCalculation", db, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCalculation indicates an expected call of InsertCalculation
func (mr *MockCalculationDAOMockRecorder) InsertCalculation(db, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCalculation", reflect.TypeOf((*MockCalculationDAO)(nil).InsertCalculation), db, model)
}

// SelectByID mocks base method
func (m *MockCalculationDAO) SelectByID(db *sql.DB, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", db, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockCalculationDAOMockRecorder) SelectByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockCalculationDAO)(nil).SelectByID), db, id)
}

// SelectLastID mocks base method
func (m *MockCalculationDAO) SelectLastID(db *sql.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLastID", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLastID indicates an expected call of SelectLastID
func (mr *MockCalculationDAOMockRecorder) SelectLastID(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLastID", reflect.TypeOf((*MockCalculationDAO)(nil).SelectLastID), db)
}

// SelectResultByID mocks base method
func (m *MockCalculationDAO) SelectResultByID(db *sql.DB, id int64) (postgres.Response, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectResultByID", db, id)
	ret0, _ := ret[0].(postgres.Response)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectResultByID indicates an expected call of SelectResultByID
func (mr *MockCalculationDAOMockRecorder) SelectResultByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectResultByID", reflect.TypeOf((*MockCalculationDAO)(nil).SelectResultByID), db, id)
}

// Update mocks base method
func (m *MockCalculationDAO) Update(db *sql.DB, model postgres.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCalculationDAOMockRecorder) Update(db, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCalculationDAO)(nil).Update), db, model)
}
